import * as Notifications from 'expo-notifications'
import dayjs from 'dayjs'

Notifications.setNotificationHandler({
    handleNotification: async () => ({
      shouldShowAlert: true,
      shouldPlaySound: false,
      shouldSetBadge: false,
    }),
});

const messages = [
    {
        title: 'Sempre em dia ðŸ˜Ž',
        body:'OlÃ¡, jÃ¡ verificou as ocorrÃªncias de hoje?\nVocÃª pode verificar agora mesmo na pÃ¡gina de Chamados ðŸ™‚'
    },
    {
        title: 'Fique alerta ðŸ‘€',
        body:'FaÃ§a a sua parte e nÃ£o deixe de registrar as ocorrÃªncias que vocÃª encontrar! âœ…'
    },
    {
        title: 'Muitas notificaÃ§Ãµes do OP ðŸ“£?',
        body:'Caso nÃ£o queira receber mais notificaÃ§Ãµes, acesse a pÃ¡gina de opÃ§Ãµes e desative as notificaÃ§Ãµes push. ðŸ¤§'
    },
    {
        title: 'EstÃ¡ com dÃºvidas?',
        body:'Tente acessar a pÃ¡gina de OpÃ§Ãµes e clique em "Ver Tutorial" ðŸ‘€'
    },
]

 export const scheduledNotifications = async () => {
    const getListOfNotifications = await Notifications.getAllScheduledNotificationsAsync();
  
    if (!getListOfNotifications.length) {
      setRandomNotifications()
    }
}
  
  const setRandomNotifications = async () => {
    for (const message of messages) {
        const now = dayjs()

        const randomInterval = Math.floor(Math.random() * 30000);
        const notificationTime = now.add(randomInterval, 'millisecond').toDate()

        const trigger = {
            date: notificationTime,
            repeats: false,
        }

        const content = {
            title: message.title,
            body: message.body,
            icon: '../assets/Logotype/LogoOP.png',
            sound: 'default'
        }

        await Notifications.scheduleNotificationAsync({
            content,
            trigger
        })
    }
}